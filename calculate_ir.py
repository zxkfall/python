from typing import List, Tuple


# 返回值枚举
class ReturnStatus:
    OK = 0
    FAIL = 1
    ERROR = 2
    NO_SPACE = 3


# 数据结构
class Buffer:
    def __init__(self):
        self.dat = bytearray(1024)
        self.len = 0


# 计算校验和
def get_sum(dat: bytearray) -> int:
    return sum(dat) & 0xFF


# 长度转字节流
def length_to_char(length: int) -> List[int]:
    ret = []
    if length < 128:
        ret.append(length)
    elif length < 16384:
        ret.append((length % 128) | 0x80)
        ret.append(length >> 7)
    else:
        ret.append((length % 128) | 0x80)
        ret.append((length >> 7) | 0x80)
        ret.append(length >> 14)
    return ret


# 获取红外外码发射指令帧
def get_stg_data(data: List[int]) -> Tuple[ReturnStatus, Buffer]:
    buf = Buffer()
    offset = 0
    buf.dat[offset] = 0x68
    offset += 3
    buf.dat[offset] = 0xFF
    offset += 1
    buf.dat[offset] = 0x22
    offset += 1
    for period in data:
        length_bytes = length_to_char(period // 8)
        for byte in length_bytes:
            buf.dat[offset] = byte
            offset += 1
    check = get_sum(buf.dat[3:offset])
    buf.dat[offset] = check
    offset += 1
    buf.dat[offset] = 0x16
    buf.len = offset + 1
    buf.dat[1] = buf.len & 0xFF
    buf.dat[2] = (buf.len >> 8) & 0xFF
    return ReturnStatus.OK, buf


# 打印16进制
def print_hex(dat: bytearray, length: int):
    hex_str = ' '.join([format(byte, '02X') for byte in dat[:length]])
    hex_str_no_white = ''.join([format(byte, '02X') for byte in dat[:length]])
    print(hex_str)
    print(hex_str_no_white)


def main(input_data: str):
    # 输入的红外编码数据
    # input_data = "683a010022ff10b0045442544254cc0152435442544254425442544254cc01544254cc0153435442534254425442544254425442534254cc0153425442544254425442544254cc01544254cc015342544254cc01534353cc13504650465046534250d001504650464f474f464f474f474f474f474ed2014e474e474e484e484e484e484e474e474e484e484e484e484e474e474ed2014ed2014e484ed2014ea127ec08b404514551454ed2014e474e4851454e484e484e484ed2014e484ed2014e484e484e484e484e484e484e484e484e484ed2014e484e484e484d484d484d484dd3014dd3014dd3014d484d484dd3014d494dd2134d494d494d494d4c4a4b4a4b4a4b4a4c4a4c4a4b4a4b4a4c4a4c4a4b4a4c4a4c4a4c4a4c4a4c4a4c4a4c4a4c4a4c4a4c4a4c4a4c494c494c494d4940465046da01461716"

    # 将十六进制字符串转换为字节列表
    byte_data = bytearray.fromhex(input_data)

    # 获取外码数据
    res, buf = get_stg_data(byte_data)

    # 输出结果
    if res == ReturnStatus.OK:
        print_hex(buf.dat, buf.len)


if __name__ == "__main__":
    main("683a010022ff10b0045442544254cc0152435442544254425442544254cc01544254cc0153435442534254425442544254425442534254cc0153425442544254425442544254cc01544254cc015342544254cc01534353cc13504650465046534250d001504650464f474f464f474f474f474f474ed2014e474e474e484e484e484e484e474e474e484e484e484e484e474e474ed2014ed2014e484ed2014ea127ec08b404514551454ed2014e474e4851454e484e484e484ed2014e484ed2014e484e484e484e484e484e484e484e484e484ed2014e484e484e484d484d484d484dd3014dd3014dd3014d484d484dd3014d494dd2134d494d494d494d4c4a4b4a4b4a4b4a4c4a4c4a4b4a4b4a4c4a4c4a4b4a4c4a4c4a4c4a4c4a4c4a4c4a4c4a4c4a4c4a4c4a4c4a4c494c494c494d4940465046da01461716")
    main("683a010022ef12b0045442544254cc0153435442544254425442544254cc01534354cc0153425442534254425442544254425442544254cc0153435442544254425442544253cd01534353cd015343544253cd01504653cb13534354425342544254cc015046534250455442514554425342534254cc01534354425343504653425046534250465342504650465046504650464fd1014fd1014f464fd1014f9f27e808b6044f474f474fd1014f474f474e474e474e474e474ed2014e484ed2014e474e474e484e474e474e484e484e484e484ed2014e474e474e484e474e474e474ed2014ed2014ed2014e484e484ed2014e474ed1134e484e474e474e474e484e484e474e474e474e474e484e474e474e474e474e474e474e474f474e474f475244524451445244514451444e484e484e484e484ed2014d0616")
    main("683a010022d524b0045441544154cb0153cd015243544254415441544254cc01544254cc0154425441544254415442544154415442544254cc0153425442544254425442544254cc01544254cc015442544254cc01534254ca13544254425442534254cc015342544253425343534353435342504653cd015343504650464f464f464f464f464f464f464f474f474f474f474e474ed1014ed2014e484e474e9f27e808b7044e484e474ed2014ed2014e484e474e474e474e474ed2014e484ed2014e484e474e474e484e474e484e474e474e474ed2014e484e474f474e474e474e474fd1014ed2014ed2014e4751444ed1014e484ed0134e47514451444e484e474e4751454e484e484e484e484e484e484e484e484e484e484e484e484e484d484e484d484d484d484d494d4b4a4b4a4b4a4c4a4c4a4c4af116")
    main("683a010022a510b1045442544254cc0153425442573f53425441544254cc01534254cc0153435442544154425442544154425441544254cc0153425442544253425442544254cc01534254cc015343544254cc01534353cb13544254425442534253cd015243534253425343544250465343504653cd015343534340464f4650464f464f474f464f474f474e474e474e474e474ed2014ed2014e484ed2014ea027e808b7044e484e474ed2014e484e474e474e474e474e484ed2014e484ed2014e484e484e474e474e474e474e474e474f474ed1014e475244524452444e474e4751cf014ed2014ed2014e4751444ed2014e484ed1134e4851444e484e484e484e484e484e484e484e484e484e484e484e484e484e484e484e484e484d484d484d484d484d494d4b4a4c4a4b4a4c4a4b4a4c4a4c4ad6014aa916")
